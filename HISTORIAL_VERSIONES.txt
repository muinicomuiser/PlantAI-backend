=========================================================================================================================
Versión 1.11.0 

    Cambios:
        - Pedido: 
            Post /pedidos/{idUsuario}
            CreatePedidoDto ya no tiene las propiedades "idCarro" ni "idUsuario"
            Ahora el Post /pedidos tiene un param -> /pedidos/{idUsuario}
            El Post cierra el Carro del usuario y le asigna un carro nuevo activo (sin fecha de cierre).
            Tabla nueva: productos_pedido
        - Productos:
            Propiedad "cantidad" a "stock"
        
        ++ Agregado archivo SQL V0.0.11


=========================================================================================================================
Versión 1.11.1
    Cambios:
        - Producto.planta:

            Tablas nuevas: plantas_tolerancia_temperatura, plantas_tamaño, plantas_entorno, plantas_iluminacion.
            Columnas eliminadas: id_especie, tolerancia_temperatura, altura.
            Columnas nuevas: id_tamaño, id_entorno, id_iluminacion, id_tolerancia_temperatura, especie.

            Eliminado: idEspecie, altura
            Agregado: especie(string), tamano(string), idTamano(number), iluminacion(string), idIluminacion(number),
                toleranciaTemperatura(string), idToleranciaTemperatura(number), entorno(string), idEntorno(number)

        - Pedidos:

            Tabla nueva: direcciones_envio
            Columna nueva: receptor varchar(50)
            DTO nuevo: CreateDireccionEnvioDto
            DTO Pedido: direccionEnvio: CreateDireccionEnvioDto
            Agregado: receptor(string)

            Pausados métodos GET, PATCH, DELETE
        
        - Carro compras:
        
            DTO nuevo: NoStockCarroProductosDto <- Contiene todos los productos de un carro cuyo stock es insuficiente. Contiene además la cantidad máxima por producto.

            Agregado: POST carro-compras/validateProductosCarro/{idCarro}
                Valida el stock del contenido de un carro de compras:
                    Si el stock es suficiente para todos los productos, reemplaza todo el carro de compras en Back por el carro entrante.
                    Si no hay stock de uno o más productos, retorna un error con un objeto { productosEnConflicto: [productosCantidad] } dentro del "response"

        ++ Agregado archivo SQL V0.0.12


=========================================================================================================================
Versión 1.11.3
**Versión actual en AWS**
    
    Cambios:
        - Catálogo:

            Se agregó un query opcional para los filtros:
                idEntorno, petFriendly, idIluminacion, idTipoRiego, idToleranciaTemperatura
            Y orden de catálogo:
                maxPrecio, minPrecio, ordenarPor, puntuacion
        
            Ahora el catálogo solo retorna productos tipo planta
    
        - Aut:

            Se agregó la posibilidad de trabajar con JWT e integrar permisos.
        
        - Reviews:

            Agregado servicio de reviews: POST, GET por producto y GET por usuario
    
        ++ Agregado archivo SQL V0.0.13 y  V0.0.14

=========================================================================================================================
Versión 1.11.4

    Cambios
        - Productos: Ahora hay imágenes múltiples

            Agregado: producto.imagenes
            Eliminado: producto.imagen

            La propiedad imagenes es un array de JSONs, que contiene la ruta de cada imagen y el id del producto.

            Agregado GET productos/admin, con query para obtener los productos paginados. Retorna todos los productos.

            Se eliminó el endpoint PATCH productos/updateProductImage

            Cambio en el DELETE removeProductImage/idProducto/indiceImagen
                Como ahora hay varias imágenes por producto, para eliminar una imagen del arreglo hay que enviar el índice de la imagen
                (partiendo desde índice 0)

    ++ Agregado archivo SQL V0.0.15

=========================================================================================================================
Versión 1.11.5

    Cambios
        - Usuarios:
            Ahora funciona el GET /usuarios/pedidos/idUsuario
            Retorna los pedidos de un usuario, funciona como un historial de compras.
        
        - Catálogo:
            Incluido el idTamano en el query

            GET catalogo/search
            Para buscar con texto por nombre
        
        - Pedidos:
            Ahora al crear un pedido se aumenta la propiedad "unidadesVendidas" de los productos.

=========================================================================================================================
Versión 1.12.0

    Cambios
        - Auth:
            Login con nombre de usuario o email -> Cambia "username" a "usernameOrEmail".

        - Usuarios:
            Para modificar roles en gestión de usuarios, ahora es:
                PUT usuarios/idUsuario/cambiar-rol
                (Antes era PUT usuarios/isUsuario)
                El json solo es { idRol: number }, pero no afecta si se envían más datos en el json.
            
            Para obtener un usuario según su id, un Admin o Super Admin puede ver cualquier id, 
                y un usuario puede ver su propio perfil asociado a su id.
                Requiere el JWT para autenticar y discriminar permisos.
        
        - Pedidos:
            Se agrega la propiedad idxDirección.
            Si el usuario tiene direcciones guardadas, se puede enviar el índice de la dirección
                guardada para llenar el pedido, en vez de enviar una dirección nueva.
                Ahora direccionEnvio y idxDirección son opcionales, pero se debe enviar al menos una de ellas.
    
    Agregados:
        - Usuarios:
            Crear usuario visitante:
                POST usuarios/visitante
            
            Buscar usuarios por coincidencias de nombre/apellido, rut y email
                GET usuarios/name/:name
                GET usuarios/rut/:rut
                GET usuarios/email/:email

            Modificar perfil de usuario:
                PUT usuarios
                Requiere el JWT, modifica solo el usuario del JWT
            
            Cambiar contraseña:
                PUT usuarios/cambiar-contrasena
                Requiere el JWT, modifica solo la contraseña del usuario del JWT
            
            Crear dirección a usuario:
                POST usuarios/direcciones
                Requiere el JWT, agrega la dirección al usuario del JWT

        ++ Agregado archivo SQL V0.0.16


    Cambios en procesos:
    Al registrar usuario, si se encuentra un usuario invitado con el mismo correo, se actualizará con los datos del usuario registrado.

=========================================================================================================================
Versión 1.12.1

    Cambios
        - Auth:
            El login retorna además el id del usuario y el timestamp de la expiración del token.
                id: number, expToken: number
        - Usuarios:
            /usuarios/visitante
            El registro de usuario visitante retorna además el id del usuario y el timestamp de la expiración del token.
                id: number, expToken: number

    Agregados
        - Usuarios:
            Obtener perfil de usuario asociado al JWT.
                GET usuarios/perfil
                Requiere el JWT, retorna los datos del usuario

=========================================================================================================================
Versión 1.12.2

    Cambios
        - Usuarios:
            Crear usuario visitante, ahora permite adjuntar opcionalmente un JWT de visitante para actualizar en vez de crear un visitante nuevo
                POST usuarios/visitante
        
    Agregados
        - Usuarios:
            Crear visitante con body vacío.
            Crea un usuario visitante sin requerir body, con datos aleatorios, y retorna el usuario con su ID, JWT y timestamp de expiración
                Post usuarios/visitante-vacio

    La idea de esta actualización es compensar la falta de IDs de usuario y carro requeridos en el flujo de carro de compras de visitante.
    Hace falta una revisión a ese flujo, a lo que se espera de cada proceso.

=========================================================================================================================
Versión 1.12.3

    Agregados: 
        Logs para presentar los flujos de forma más didáctica. Se agregan en puntos clave, para mostrar los procesos que se están llevando a cabo, como creación de usuarios, de pedidos y etcétera.

    Corrección:
        - Catálogo: Corregido orden ascendente/descendente
        - Carro: Corregida creación de carro


=========================================================================================================================
** Próxima Versión

    Cambios:
        - Productos:
            Los endpoints de DELETE ahora solo retornan un código 204, sin body.
            Soft Delete para Productos
                Los productos solo se eliminan si nunca han sido comprado. Si se han comprado se les da una fecha de eliminación, para no rompper los registros de compras.

    Agregados:
        - Módulo de Promociones
            CRUD
            Obtener productos seleccionados promoción
            Validar cupón con código

        - Productos:
            Propiedad "promociones: GetPromocionesDto[]"
                Arreglo de promociones activas de cada producto.
            Propiedad "precioFinal: number"
                Para informar el precio después de aplicar una promoción.

    *Falta:
        Calcular el precioFinal
        Que al comprar se genere la compra con el precio final
        Permisos
        Documentar y describir

